name: Integration Tests

on: 
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        
        env:
          # must specify password for PG Docker container image, see: https://registry.hub.docker.com/_/postgres?tab=description&page=1&name=10
          POSTGRES_USER: ${{ secrets.DB_USERNAME }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_DB: ${{ secrets.DB_DATABASE_NAME }}
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.23

      - name: Integration Tests
        run: | 
          cat <<EOT > test.env
          APP_PORT=445
          SWAGGER_HOST_URL=local.api.resturnt.co
          SWAGGER_HOST_SCHEME=https
          SWAGGER_USERNAME=${SWAGGER_USERNAME}
          SWAGGER_PASSWORD=${SWAGGER_PASSWORD}

          DB_HOST=${DB_HOST}
          DB_PORT=${DB_PORT}
          DB_USERNAME=${DB_USERNAME}
          DB_PASSWORD=${DB_PASSWORD}
          DB_DATABASE_NAME=${DB_DATABASE_NAME}
          EOT

          go install github.com/pressly/goose/v3/cmd/goose@latest
          POSTGRES_URL="host=${DB_HOST} port=${DB_PORT} user=${DB_USERNAME} password=${DB_PASSWORD} dbname=${DB_DATABASE_NAME} sslmode=disable"
          goose -dir './internal/database/migrations' postgres "${POSTGRES_URL}" up
          go test `go list ./... | grep -v cmd` -coverprofile=coverage.out -coverpkg=./...

        env:
          CGO_ENABLED: 0
          CI: true
          SWAGGER_USERNAME: ${{secrets.SWAGGER_USERNAME }}
          SWAGGER_PASSWORD: ${{secrets.SWAGGER_PASSWORD }}
          DB_HOST: ${{secrets.DB_HOST}}
          DB_PORT: ${{secrets.DB_PORT}}
          DB_USERNAME: ${{secrets.DB_USERNAME}}
          DB_PASSWORD: ${{secrets.DB_PASSWORD}}
          DB_DATABASE_NAME: ${{ secrets.DB_DATABASE_NAME }}
